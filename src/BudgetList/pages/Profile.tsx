import { useState } from 'react';
import {
    Container,
    Paper,
    Typography,
    Box,
    Switch,
    FormControlLabel,
    Select,
    MenuItem,
    FormControl,
    InputLabel,
    Button,
    Divider,
    List,
    ListItem,
    ListItemText,
    ListItemIcon,
    Avatar,
    Chip,
    Alert,
    Snackbar
} from '@mui/material';
import {
    Person,
    Palette,
    Language,
    AttachMoney,
    CloudSync,
    Security,
    Notifications,
    Backup,
    Delete,
    Edit
} from '@mui/icons-material';
import { useTranslation } from 'react-i18next';
import { useThemeMode } from '../../Budgets/theme/ThemeContext';
import { useSettingsStore } from '../../Budgets/store/useSettingsStore';
import { useAuth } from '../../Budgets/hooks/useAuth';

export default function Profile() {
    const { t } = useTranslation();
    const { mode, toggleTheme } = useThemeMode();
    const { currency, setCurrency } = useSettingsStore();
    const { session } = useAuth();
    const [language, setLanguage] = useState('ru');
    const [iCloudSync, setICloudSync] = useState(false);
    const [notifications, setNotifications] = useState(true);
    const [backupEnabled, setBackupEnabled] = useState(true);
    const [snackbarOpen, setSnackbarOpen] = useState(false);
    const [snackbarMessage, setSnackbarMessage] = useState('');

    const currencies = [
        { code: 'RUB', symbol: '‚ÇΩ', name: '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å' },
        { code: 'USD', symbol: '$', name: '–î–æ–ª–ª–∞—Ä –°–®–ê' },
        { code: 'EUR', symbol: '‚Ç¨', name: '–ï–≤—Ä–æ' },
        { code: 'GBP', symbol: '¬£', name: '–§—É–Ω—Ç —Å—Ç–µ—Ä–ª–∏–Ω–≥–æ–≤' },
        { code: 'CNY', symbol: '¬•', name: '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å' },
    ];

    const languages = [
        { code: 'ru', name: '–†—É—Å—Å–∫–∏–π', flag: 'üá∑üá∫' },
        { code: 'en', name: 'English', flag: 'üá∫üá∏' },
        { code: 'fr', name: 'Fran√ßais', flag: 'üá´üá∑' },
        { code: 'de', name: 'Deutsch', flag: 'üá©üá™' },
        { code: 'es', name: 'Espa√±ol', flag: 'üá™üá∏' },
        { code: 'me', name: 'Crnogorski', flag: 'üá≤üá™' },
    ];

    const handleSave = () => {
        setSnackbarMessage('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        setSnackbarOpen(true);
    };

    const handleExportData = () => {
        setSnackbarMessage('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
        setSnackbarOpen(true);
    };

    const handleDeleteAccount = () => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
            setSnackbarMessage('–§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ');
            setSnackbarOpen(true);
        }
    };

    return (
        <Container maxWidth="md" sx={{ py: 4 }}>
            <Typography variant="h4" gutterBottom sx={{ mb: 4, color: mode === 'dark' ? '#F5F5DC' : '#654633' }}>
                üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç
            </Typography>

            {/* –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
            <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
                <Box display="flex" alignItems="center" mb={3}>
                    <Avatar sx={{ width: 64, height: 64, mr: 2, bgcolor: 'primary.main' }}>
                        <Person fontSize="large" />
                    </Avatar>
                    <Box>
                        <Typography variant="h6" sx={{ color: mode === 'dark' ? '#F5F5DC' : '#654633' }}>
                            {session?.user?.email || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
                        </Typography>
                        <Chip 
                            label="–ü—Ä–µ–º–∏—É–º" 
                            color="primary" 
                            size="small" 
                            sx={{ mt: 1 }}
                        />
                    </Box>
                </Box>
                
                <Button
                    variant="outlined"
                    startIcon={<Edit />}
                    sx={{ 
                        borderColor: 'rgba(101, 70, 51, 0.3)',
                        color: '#654633',
                        '&:hover': {
                            borderColor: 'rgba(101, 70, 51, 0.6)',
                            backgroundColor: 'rgba(101, 70, 51, 0.1)',
                        }
                    }}
                >
                    –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                </Button>
            </Paper>

            {/* –ù–∞—Å—Ç—Ä–æ–π–∫–∏ */}
            <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 3, color: mode === 'dark' ? '#F5F5DC' : '#654633' }}>
                    ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                </Typography>

                <List>
                    {/* –¢–µ–º–∞ */}
                    <ListItem>
                        <ListItemIcon>
                            <Palette />
                        </ListItemIcon>
                        <ListItemText 
                            primary="–¢–µ–º–Ω–∞—è —Ç–µ–º–∞" 
                            secondary="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –º–µ–∂–¥—É —Å–≤–µ—Ç–ª–æ–π –∏ —Ç–µ–º–Ω–æ–π —Ç–µ–º–æ–π"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={mode === 'dark'}
                                    onChange={toggleTheme}
                                    sx={{
                                        '& .MuiSwitch-switchBase.Mui-checked': {
                                            color: '#654633',
                                        },
                                        '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                                            backgroundColor: 'rgba(101, 70, 51, 0.5)',
                                        },
                                    }}
                                />
                            }
                            label=""
                        />
                    </ListItem>

                    <Divider />

                    {/* –Ø–∑—ã–∫ */}
                    <ListItem>
                        <ListItemIcon>
                            <Language />
                        </ListItemIcon>
                        <ListItemText 
                            primary="–Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞" 
                            secondary="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                        />
                        <FormControl size="small" sx={{ minWidth: 120 }}>
                            <Select
                                value={language}
                                onChange={(e) => setLanguage(e.target.value)}
                                sx={{
                                    '& .MuiSelect-select': {
                                        color: mode === 'dark' ? '#F5F5DC' : '#654633',
                                    },
                                }}
                            >
                                {languages.map((lang) => (
                                    <MenuItem key={lang.code} value={lang.code}>
                                        {lang.flag} {lang.name}
                                    </MenuItem>
                                ))}
                            </Select>
                        </FormControl>
                    </ListItem>

                    <Divider />

                    {/* –í–∞–ª—é—Ç–∞ */}
                    <ListItem>
                        <ListItemIcon>
                            <AttachMoney />
                        </ListItemIcon>
                        <ListItemText 
                            primary="–í–∞–ª—é—Ç–∞" 
                            secondary="–û—Å–Ω–æ–≤–Ω–∞—è –≤–∞–ª—é—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—É–º–º"
                        />
                        <FormControl size="small" sx={{ minWidth: 120 }}>
                            <Select
                                value={currency}
                                onChange={(e) => setCurrency(e.target.value)}
                                sx={{
                                    '& .MuiSelect-select': {
                                        color: mode === 'dark' ? '#F5F5DC' : '#654633',
                                    },
                                }}
                            >
                                {currencies.map((curr) => (
                                    <MenuItem key={curr.code} value={curr.code}>
                                        {curr.symbol} {curr.code}
                                    </MenuItem>
                                ))}
                            </Select>
                        </FormControl>
                    </ListItem>

                    <Divider />

                    {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
                    <ListItem>
                        <ListItemIcon>
                            <Notifications />
                        </ListItemIcon>
                        <ListItemText 
                            primary="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è" 
                            secondary="–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={notifications}
                                    onChange={(e) => setNotifications(e.target.checked)}
                                    sx={{
                                        '& .MuiSwitch-switchBase.Mui-checked': {
                                            color: '#654633',
                                        },
                                        '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                                            backgroundColor: 'rgba(101, 70, 51, 0.5)',
                                        },
                                    }}
                                />
                            }
                            label=""
                        />
                    </ListItem>
                </List>
            </Paper>

            {/* –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è */}
            <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 3, color: mode === 'dark' ? '#F5F5DC' : '#654633' }}>
                    ‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
                </Typography>

                <List>
                    <ListItem>
                        <ListItemIcon>
                            <CloudSync />
                        </ListItemIcon>
                        <ListItemText 
                            primary="iCloud —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è" 
                            secondary="–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å iCloud"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={iCloudSync}
                                    onChange={(e) => setICloudSync(e.target.checked)}
                                    sx={{
                                        '& .MuiSwitch-switchBase.Mui-checked': {
                                            color: '#654633',
                                        },
                                        '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                                            backgroundColor: 'rgba(101, 70, 51, 0.5)',
                                        },
                                    }}
                                />
                            }
                            label=""
                        />
                    </ListItem>

                    <Divider />

                    <ListItem>
                        <ListItemIcon>
                            <Backup />
                        </ListItemIcon>
                        <ListItemText 
                            primary="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ" 
                            secondary="–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
                        />
                        <FormControlLabel
                            control={
                                <Switch
                                    checked={backupEnabled}
                                    onChange={(e) => setBackupEnabled(e.target.checked)}
                                    sx={{
                                        '& .MuiSwitch-switchBase.Mui-checked': {
                                            color: '#654633',
                                        },
                                        '& .MuiSwitch-switchBase.Mui-checked + .MuiSwitch-track': {
                                            backgroundColor: 'rgba(101, 70, 51, 0.5)',
                                        },
                                    }}
                                />
                            }
                            label=""
                        />
                    </ListItem>
                </List>
            </Paper>

            {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ */}
            <Paper sx={{ p: 3, mb: 3, borderRadius: 3 }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 3, color: mode === 'dark' ? '#F5F5DC' : '#654633' }}>
                    üíæ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏
                </Typography>

                <Box display="flex" gap={2} flexWrap="wrap">
                    <Button
                        variant="outlined"
                        startIcon={<Backup />}
                        onClick={handleExportData}
                        sx={{ 
                            borderColor: 'rgba(101, 70, 51, 0.3)',
                            color: '#654633',
                            '&:hover': {
                                borderColor: 'rgba(101, 70, 51, 0.6)',
                                backgroundColor: 'rgba(101, 70, 51, 0.1)',
                            }
                        }}
                    >
                        –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
                    </Button>

                    <Button
                        variant="outlined"
                        startIcon={<Security />}
                        sx={{ 
                            borderColor: 'rgba(101, 70, 51, 0.3)',
                            color: '#654633',
                            '&:hover': {
                                borderColor: 'rgba(101, 70, 51, 0.6)',
                                backgroundColor: 'rgba(101, 70, 51, 0.1)',
                            }
                        }}
                    >
                        –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å
                    </Button>
                </Box>
            </Paper>

            {/* –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞ */}
            <Paper sx={{ p: 3, borderRadius: 3, border: '2px solid #ff6b6b' }}>
                <Typography variant="h6" gutterBottom sx={{ mb: 3, color: '#ff6b6b' }}>
                    ‚ö†Ô∏è –û–ø–∞—Å–Ω–∞—è –∑–æ–Ω–∞
                </Typography>

                <Alert severity="warning" sx={{ mb: 2 }}>
                    –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!
                </Alert>

                <Button
                    variant="outlined"
                    color="error"
                    startIcon={<Delete />}
                    onClick={handleDeleteAccount}
                    sx={{ 
                        borderColor: '#ff6b6b',
                        color: '#ff6b6b',
                        '&:hover': {
                            borderColor: '#ff5252',
                            backgroundColor: 'rgba(255, 107, 107, 0.1)',
                        }
                    }}
                >
                    –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç
                </Button>
            </Paper>

            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
            <Box display="flex" justifyContent="center" mt={4}>
                <Button
                    variant="contained"
                    size="large"
                    onClick={handleSave}
                    sx={{
                        background: 'linear-gradient(135deg, rgba(234, 234, 244, 0.8) 0%, rgba(248, 229, 229, 0.6) 100%)',
                        color: '#654633',
                        fontWeight: 'bold',
                        px: 4,
                        py: 1.5,
                        borderRadius: 2,
                        '&:hover': {
                            background: 'linear-gradient(135deg, rgba(234, 234, 244, 0.9) 0%, rgba(248, 229, 229, 0.8) 100%)',
                            transform: 'translateY(-1px)',
                            boxShadow: '0 6px 20px rgba(101, 70, 51, 0.2)',
                        }
                    }}
                >
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </Button>
            </Box>

            {/* Snackbar –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π */}
            <Snackbar
                open={snackbarOpen}
                autoHideDuration={3000}
                onClose={() => setSnackbarOpen(false)}
                message={snackbarMessage}
            />
        </Container>
    );
}
